--- /Work/github/thumbor/thumbor/engines/pil.py	2023-03-10 08:21:40.309213661 +0100
+++ /Work/github/thumbor-piliptc-engine/thumbor_piliptc_engine/engine.py	2023-03-10 08:37:52.203599185 +0100
@@ -12,7 +12,7 @@
 import datetime
 from io import BytesIO
 from subprocess import PIPE, Popen
-from tempfile import mkstemp, NamedTemporaryFile
+from tempfile import mkstemp, NamedTemporaryFile,SpooledTemporaryFile
 
 import piexif
 from PIL import Image, ImageDraw, ImageFile, ImageSequence, JpegImagePlugin
@@ -112,28 +112,20 @@
             img = Image.open(BytesIO(buffer))
         except DECOMPRESSION_BOMB_EXCEPTIONS as error:
             logger.warning("[PILEngine] create_image failed: %s", error)
+
             return None
 
         if IPTC_PASSTHROUGH:
             # we need to fetch iptc data from "not modified" or "Pil read" image source
             # buffer contains original image
-            iptc_start = datetime.datetime.now()
-            with NamedTemporaryFile(dir='/tmp', delete=False) as tmpfile:
-                iptc_passthrough_temp_file_name = tmpfile.name
-            iptc_passthrough_temp_file_name_original = iptc_passthrough_temp_file_name+ '.original'
             # we need a file to use IPTCInfo : we save original buffer stream ( transported by self.iptc ) to local temporary file
-            with open(iptc_passthrough_temp_file_name_original, "wb") as binary_file:
-                binary_file.write(buffer)
-            logger.debug("IPTC_PASSTHROUGH original image saved as "+iptc_passthrough_temp_file_name_original)
-
             # we try to read iptc data from original file : iptc data saved to self.iptc
-            info = IPTCInfo(iptc_passthrough_temp_file_name_original)
+            iptc_start = datetime.datetime.now()
+            with SpooledTemporaryFile(max_size=16777216, mode='w+b') as iptc_passthrough_temp_file_name_original:
+                iptc_passthrough_temp_file_name_original.write(buffer)
+                info = IPTCInfo(iptc_passthrough_temp_file_name_original)
             if info.__dict__ != '':
                 self.iptc = info.__dict__['_data'].copy()
-            # removing original image
-            logger.debug("IPTC_PASSTHROUGH removing "+iptc_passthrough_temp_file_name_original)
-            os.remove(iptc_passthrough_temp_file_name_original)
-            #
             iptc_total_time = ( datetime.datetime.now() - iptc_start).total_seconds() * 1000
             self.context.metrics.timing("iptc_passthrough_create_image.time", iptc_total_time)
 
@@ -463,7 +455,7 @@
 
         if IPTC_PASSTHROUGH and self.iptc is not None:
             iptc_start = datetime.datetime.now()
-            with NamedTemporaryFile(dir='/tmp', delete=False) as tmpfile:
+            with NamedTemporaryFile(dir='/tmp', delete=True) as tmpfile:
                 iptc_passthrough_temp_file_name = tmpfile.name
             iptc_passthrough_temp_file_name_result   = iptc_passthrough_temp_file_name+ '.result'
             # we need to save result image to local file to add iptc data fetched before
@@ -474,6 +466,9 @@
             info_result = IPTCInfo(iptc_passthrough_temp_file_name_result, force=True)
             info_result.__dict__['_data'] = self.iptc
             info_result.save()
+            #
+            if os.path.exists(iptc_passthrough_temp_file_name_result+'~'):
+              os.remove(iptc_passthrough_temp_file_name_result+'~')
 
             # reading new result file with iptc data and override legacy" results var
             with open(iptc_passthrough_temp_file_name_result, mode='rb') as file:
